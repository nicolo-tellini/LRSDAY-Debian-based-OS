#!/bin/bash
set -e
##########################################
# load environment variables for LRSDAY
source ./../../env.sh
PATH=$bwa_dir:$samtools_dir:$gnuplot_dir:$canu_dir:$mummer4_dir:$spades_dir:$prodigal_dir:$PATH

###########################################
# set project-specific variables
prefix="SK1" # The file name prefix for the processing sample. Default = "SK1" for the testing example.
genome="./../04.Reference-guided_Assembly_Scaffolding/$prefix.assembly.ref_based_scaffolded.fa" # The file path of the input genome assembly
mt_contig_list="./../04.Reference-guided_Assembly_Scaffolding/$prefix.assembly.ref_based_scaffolded.mt_contig.list" # The mitochodnrial contig list generated by the module 04.Reference-guided_Assembly_Scaffolding.
gene_start="$LRSDAY_HOME/data/ATP6.cds.fa" # A FASTA file containing the CDS sequence of the mitochodnrial gene to be used as the starting point of the mitochondrial assembly. This can be set to any gene as long as a fasta file containing the DNA sequence of the gene is provided.
ref_genome_raw="./../00.Reference_Genome/S288C.ASM205763v1.fa" # The file path of the raw reference genome 
chrMT_tag="chrMT" # The sequence name for the mitochondrial genome in the raw reference genome file, if there are multiple reference mitochondrial genomes that you want to check, use a single ';' to separate them. e.g. "Sc_chrMT;Sp_chrMT". Default = "chrMT".
threads=1 # The number of threads to use. Default = "1".
debug="no" # Whether to keep intermediate files for debugging. Use "yes" if prefer to keep intermediate files, otherwise use "no". Default = "no".

##########################################
# process the pipeline
$LRSDAY_HOME/scripts/select_fasta_by_list.pl -i $genome -l $mt_contig_list -m reverse -o $prefix.assembly.non_mt_contig.fa
$LRSDAY_HOME/scripts/select_fasta_by_list.pl -i $genome -l $mt_contig_list -m normal -o $prefix.assembly.mt_contig.fa


if [[ $(egrep -c "^>" "$prefix.assembly.mt_contig.fa") -eq 0 ]]
then
    echo "no chrMT contig was found in the assembly, skip this step and just output the input assembly ..."
    cp $genome $prefix.assembly.mt_improved.fa
else
    # break the mitochondrial scaffold by the gaps introduced during reference-based scaffolding
    perl $LRSDAY_HOME/scripts/break_scaffolds_by_N.pl -i $prefix.assembly.mt_contig.fa -o $prefix.assembly.mt_contig.descaffold.fa -g 5
    echo "Contigs corresponding to chrMT are found, will run fragmentation, re-assembly, and circularization ..."
    db="$prefix.assembly.mt_contig.descaffold.fa"
    db_tag="$prefix.assembly.mt_contig.descaffold"
    $blast_dir/makeblastdb -in $db  -dbtype nucl  -title $db_tag  -hash_index -out $db_tag
    $blast_dir/blastn -query $gene_start -db $db_tag -evalue 1E-6 \
	-outfmt '7 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore qlen qcovs' >$prefix.assembly.mt_contig.descaffold.tblastx.out


perl $LRSDAY_HOME/scripts/filter_blast_result.pl -i $prefix.assembly.mt_contig.descaffold.tblastx.out -o $prefix.assembly.mt_contig.descaffold.tblastx.filtered.out -pct_identity_cutoff 90 -query_cov_cutoff 90
perl $LRSDAY_HOME/scripts/break_contig_by_blast.pl -i $prefix.assembly.mt_contig.descaffold.fa -b $prefix.assembly.mt_contig.descaffold.tblastx.filtered.out -o $prefix.assembly.mt_contig.break_by_blast.fa

    # reassemble the mitochondrial genome using CAP3 to collapse smaller fragments
    $cap_dir/cap3 $prefix.assembly.mt_contig.break_by_blast.fa -k 0 

    

if [[ $(egrep -c "^>" "$prefix.assembly.mt_contig.break_by_blast.fa.cap.contigs") -eq 0 ]]
    then
        cat $prefix.assembly.mt_contig.break_by_blast.fa | sed "s/>/>chrMT_/" > $prefix.assembly.mt_contig.for_clean.fa
    else
        cat $prefix.assembly.mt_contig.break_by_blast.fa.cap.contigs| sed "s/>/>chrMT_/" > $prefix.assembly.mt_contig.for_clean.fa
    fi

    $circlator_dir/circlator clean --verbose $prefix.assembly.mt_contig.for_clean.fa  ${prefix}.assembly.mt_contig.for_fixstart.fa 


    mv $prefix.assembly.mt_contig.for_fixstart.fa.fasta $prefix.assembly.mt_contig.for_fixstart.fa
    
    db="$prefix.assembly.mt_contig.for_fixstart.fa"
    db_tag="$prefix.assembly.mt_contig.for_fixstart"
    $blast_dir/makeblastdb -in $db  -dbtype nucl  -title $db_tag  -hash_index -out $db_tag
    $blast_dir/blastn -query $gene_start -db $db_tag -evalue 1E-6 \
	-outfmt '7 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore qlen qcovs' >$prefix.assembly.mt_contig.for_fixstart.tblastx.out

    perl $LRSDAY_HOME/scripts/filter_blast_result.pl -i $prefix.assembly.mt_contig.for_fixstart.tblastx.out -o $prefix.assembly.mt_contig.for_fixstart.tblastx.filtered.out -pct_identity_cutoff 90 -query_cov_cutoff 90

    cat $prefix.assembly.mt_contig.for_fixstart.tblastx.filtered.out |egrep -v "^#" |cut -f 2 > $prefix.assembly.mt_contig.for_fixstart.list
    $LRSDAY_HOME/scripts/select_fasta_by_list.pl -i $prefix.assembly.mt_contig.for_fixstart.fa -l $prefix.assembly.mt_contig.for_fixstart.list -m reverse -o $prefix.assembly.for_fixstart.for_skip.fa
    cat $prefix.assembly.for_fixstart.for_skip.fa |egrep ">" |sed "s/>//" > $prefix.assembly.for_fixstart.for_skip.list

    $circlator_dir/circlator fixstart --verbose --genes_fa $gene_start --min_id 90 --ignore $prefix.assembly.for_fixstart.for_skip.list $prefix.assembly.mt_contig.for_fixstart.fa  $prefix.assembly.mt_contig.circlator

    mv $prefix.assembly.mt_contig.circlator.fasta $prefix.assembly.mt_contig.circlator.fa
    cat $prefix.assembly.non_mt_contig.fa |egrep "^>"|egrep -v "^>chr" |sed "s/>//" > $prefix.assembly.non_primary_contig.list
    $LRSDAY_HOME/scripts/select_fasta_by_list.pl -i $prefix.assembly.non_mt_contig.fa -l $prefix.assembly.non_primary_contig.list -m reverse -o $prefix.assembly.primary_contig.fa
    $LRSDAY_HOME/scripts/select_fasta_by_list.pl -i $prefix.assembly.non_mt_contig.fa -l $prefix.assembly.non_primary_contig.list -m normal -o $prefix.assembly.non_primary_contig.fa
    cat $prefix.assembly.primary_contig.fa $prefix.assembly.mt_contig.circlator.fa $prefix.assembly.non_primary_contig.fa > $prefix.assembly.mt_improved.fa

    # generate dotplot for the mitochondrial genome only
    echo $chrMT_tag | sed -e "s/;/\n/g" > ref.chrMT.list
    perl $LRSDAY_HOME/scripts/select_fasta_by_list.pl -i $ref_genome_raw -l ref.chrMT.list -m normal  -o ref.chrMT.fa
    $mummer4_dir/nucmer -t $threads --maxmatch --nosimplify  -p $prefix.assembly.mt_improved.chrMT ref.chrMT.fa $prefix.assembly.mt_contig.circlator.fa
    $mummer4_dir/delta-filter -m  $prefix.assembly.mt_improved.chrMT.delta > $prefix.assembly.mt_improved.chrMT.delta_filter
    $mummer4_dir/mummerplot --large --postscript $prefix.assembly.mt_improved.chrMT.delta_filter -p $prefix.assembly.mt_improved.chrMT.filter
    perl $LRSDAY_HOME/scripts/fine_tune_gnuplot.pl -i $prefix.assembly.mt_improved.chrMT.filter.gp -o $prefix.assembly.mt_improved.chrMT.filter_adjust.gp -r ref.chrMT.fa -q $prefix.assembly.mt_contig.final.fa
    $gnuplot_dir/gnuplot < $prefix.assembly.mt_improved.chrMT.filter_adjust.gp
fi

# clean up intermediate files
if [[ $debug == "no" ]]
then

    if [[ $(egrep -c "^>" "$prefix.assembly.mt_contig.fa") -ne 0 ]]
    then
	rm *.filter.fplot
	rm *.filter.rplot
	rm *.delta
	rm *.delta_filter
	rm $prefix.assembly.mt_contig.*
	rm $prefix.assembly.non_mt_contig.*
	rm $prefix.assembly.mt_improved.chrMT.filter.ps
	rm $prefix.assembly.mt_improved.chrMT.filter.gp
	rm $prefix.assembly.mt_improved.chrMT.filter_adjust.gp
	rm ref.chrMT.list
	rm ref.chrMT.fa
	rm $prefix.assembly.non_primary_contig.list
	rm $prefix.assembly.primary_contig.fa
	rm $prefix.assembly.non_primary_contig.fa
    fi
    if [ -e "$prefix.assembly.for_fixstart.for_skip.fa" ]
    then
	rm $prefix.assembly.for_fixstart.for_skip.fa
	rm $prefix.assembly.for_fixstart.for_skip.list
    fi
fi

############################
# checking bash exit status
if [[ $? -eq 0 ]]
then
    echo ""
    echo "LRSDAY message: This bash script has been successfully processed! :)"
    echo ""
    echo ""
    exit 0
fi
############################
